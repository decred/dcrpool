// Code generated by MockGen. DO NOT EDIT.
// Source: database.go

// Package pool is a generated GoMock package.
package pool

import (
	gomock "github.com/golang/mock/gomock"
	http "net/http"
	reflect "reflect"
)

// MockDatabase is a mock of Database interface
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// httpBackup mocks base method
func (m *MockDatabase) httpBackup(w http.ResponseWriter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "httpBackup", w)
	ret0, _ := ret[0].(error)
	return ret0
}

// httpBackup indicates an expected call of httpBackup
func (mr *MockDatabaseMockRecorder) httpBackup(w interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "httpBackup", reflect.TypeOf((*MockDatabase)(nil).httpBackup), w)
}

// Backup mocks base method
func (m *MockDatabase) Backup(fileName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Backup", fileName)
	ret0, _ := ret[0].(error)
	return ret0
}

// Backup indicates an expected call of Backup
func (mr *MockDatabaseMockRecorder) Backup(fileName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Backup", reflect.TypeOf((*MockDatabase)(nil).Backup), fileName)
}

// Close mocks base method
func (m *MockDatabase) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockDatabaseMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDatabase)(nil).Close))
}

// fetchPoolMode mocks base method
func (m *MockDatabase) fetchPoolMode() (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "fetchPoolMode")
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// fetchPoolMode indicates an expected call of fetchPoolMode
func (mr *MockDatabaseMockRecorder) fetchPoolMode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "fetchPoolMode", reflect.TypeOf((*MockDatabase)(nil).fetchPoolMode))
}

// persistPoolMode mocks base method
func (m *MockDatabase) persistPoolMode(mode uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "persistPoolMode", mode)
	ret0, _ := ret[0].(error)
	return ret0
}

// persistPoolMode indicates an expected call of persistPoolMode
func (mr *MockDatabaseMockRecorder) persistPoolMode(mode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "persistPoolMode", reflect.TypeOf((*MockDatabase)(nil).persistPoolMode), mode)
}

// fetchCSRFSecret mocks base method
func (m *MockDatabase) fetchCSRFSecret() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "fetchCSRFSecret")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// fetchCSRFSecret indicates an expected call of fetchCSRFSecret
func (mr *MockDatabaseMockRecorder) fetchCSRFSecret() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "fetchCSRFSecret", reflect.TypeOf((*MockDatabase)(nil).fetchCSRFSecret))
}

// persistCSRFSecret mocks base method
func (m *MockDatabase) persistCSRFSecret(secret []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "persistCSRFSecret", secret)
	ret0, _ := ret[0].(error)
	return ret0
}

// persistCSRFSecret indicates an expected call of persistCSRFSecret
func (mr *MockDatabaseMockRecorder) persistCSRFSecret(secret interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "persistCSRFSecret", reflect.TypeOf((*MockDatabase)(nil).persistCSRFSecret), secret)
}

// persistLastPaymentInfo mocks base method
func (m *MockDatabase) persistLastPaymentInfo(height uint32, paidOn int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "persistLastPaymentInfo", height, paidOn)
	ret0, _ := ret[0].(error)
	return ret0
}

// persistLastPaymentInfo indicates an expected call of persistLastPaymentInfo
func (mr *MockDatabaseMockRecorder) persistLastPaymentInfo(height, paidOn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "persistLastPaymentInfo", reflect.TypeOf((*MockDatabase)(nil).persistLastPaymentInfo), height, paidOn)
}

// loadLastPaymentInfo mocks base method
func (m *MockDatabase) loadLastPaymentInfo() (uint32, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "loadLastPaymentInfo")
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// loadLastPaymentInfo indicates an expected call of loadLastPaymentInfo
func (mr *MockDatabaseMockRecorder) loadLastPaymentInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "loadLastPaymentInfo", reflect.TypeOf((*MockDatabase)(nil).loadLastPaymentInfo))
}

// persistLastPaymentCreatedOn mocks base method
func (m *MockDatabase) persistLastPaymentCreatedOn(createdOn int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "persistLastPaymentCreatedOn", createdOn)
	ret0, _ := ret[0].(error)
	return ret0
}

// persistLastPaymentCreatedOn indicates an expected call of persistLastPaymentCreatedOn
func (mr *MockDatabaseMockRecorder) persistLastPaymentCreatedOn(createdOn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "persistLastPaymentCreatedOn", reflect.TypeOf((*MockDatabase)(nil).persistLastPaymentCreatedOn), createdOn)
}

// loadLastPaymentCreatedOn mocks base method
func (m *MockDatabase) loadLastPaymentCreatedOn() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "loadLastPaymentCreatedOn")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// loadLastPaymentCreatedOn indicates an expected call of loadLastPaymentCreatedOn
func (mr *MockDatabaseMockRecorder) loadLastPaymentCreatedOn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "loadLastPaymentCreatedOn", reflect.TypeOf((*MockDatabase)(nil).loadLastPaymentCreatedOn))
}

// fetchAccount mocks base method
func (m *MockDatabase) fetchAccount(id string) (*Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "fetchAccount", id)
	ret0, _ := ret[0].(*Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// fetchAccount indicates an expected call of fetchAccount
func (mr *MockDatabaseMockRecorder) fetchAccount(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "fetchAccount", reflect.TypeOf((*MockDatabase)(nil).fetchAccount), id)
}

// persistAccount mocks base method
func (m *MockDatabase) persistAccount(acc *Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "persistAccount", acc)
	ret0, _ := ret[0].(error)
	return ret0
}

// persistAccount indicates an expected call of persistAccount
func (mr *MockDatabaseMockRecorder) persistAccount(acc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "persistAccount", reflect.TypeOf((*MockDatabase)(nil).persistAccount), acc)
}

// deleteAccount mocks base method
func (m *MockDatabase) deleteAccount(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "deleteAccount", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// deleteAccount indicates an expected call of deleteAccount
func (mr *MockDatabaseMockRecorder) deleteAccount(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "deleteAccount", reflect.TypeOf((*MockDatabase)(nil).deleteAccount), id)
}

// fetchPayment mocks base method
func (m *MockDatabase) fetchPayment(id string) (*Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "fetchPayment", id)
	ret0, _ := ret[0].(*Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// fetchPayment indicates an expected call of fetchPayment
func (mr *MockDatabaseMockRecorder) fetchPayment(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "fetchPayment", reflect.TypeOf((*MockDatabase)(nil).fetchPayment), id)
}

// PersistPayment mocks base method
func (m *MockDatabase) PersistPayment(payment *Payment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersistPayment", payment)
	ret0, _ := ret[0].(error)
	return ret0
}

// PersistPayment indicates an expected call of PersistPayment
func (mr *MockDatabaseMockRecorder) PersistPayment(payment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersistPayment", reflect.TypeOf((*MockDatabase)(nil).PersistPayment), payment)
}

// updatePayment mocks base method
func (m *MockDatabase) updatePayment(payment *Payment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "updatePayment", payment)
	ret0, _ := ret[0].(error)
	return ret0
}

// updatePayment indicates an expected call of updatePayment
func (mr *MockDatabaseMockRecorder) updatePayment(payment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "updatePayment", reflect.TypeOf((*MockDatabase)(nil).updatePayment), payment)
}

// deletePayment mocks base method
func (m *MockDatabase) deletePayment(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "deletePayment", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// deletePayment indicates an expected call of deletePayment
func (mr *MockDatabaseMockRecorder) deletePayment(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "deletePayment", reflect.TypeOf((*MockDatabase)(nil).deletePayment), id)
}

// ArchivePayment mocks base method
func (m *MockDatabase) ArchivePayment(payment *Payment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ArchivePayment", payment)
	ret0, _ := ret[0].(error)
	return ret0
}

// ArchivePayment indicates an expected call of ArchivePayment
func (mr *MockDatabaseMockRecorder) ArchivePayment(payment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArchivePayment", reflect.TypeOf((*MockDatabase)(nil).ArchivePayment), payment)
}

// fetchPaymentsAtHeight mocks base method
func (m *MockDatabase) fetchPaymentsAtHeight(height uint32) ([]*Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "fetchPaymentsAtHeight", height)
	ret0, _ := ret[0].([]*Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// fetchPaymentsAtHeight indicates an expected call of fetchPaymentsAtHeight
func (mr *MockDatabaseMockRecorder) fetchPaymentsAtHeight(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "fetchPaymentsAtHeight", reflect.TypeOf((*MockDatabase)(nil).fetchPaymentsAtHeight), height)
}

// fetchPendingPayments mocks base method
func (m *MockDatabase) fetchPendingPayments() ([]*Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "fetchPendingPayments")
	ret0, _ := ret[0].([]*Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// fetchPendingPayments indicates an expected call of fetchPendingPayments
func (mr *MockDatabaseMockRecorder) fetchPendingPayments() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "fetchPendingPayments", reflect.TypeOf((*MockDatabase)(nil).fetchPendingPayments))
}

// pendingPaymentsForBlockHash mocks base method
func (m *MockDatabase) pendingPaymentsForBlockHash(blockHash string) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "pendingPaymentsForBlockHash", blockHash)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// pendingPaymentsForBlockHash indicates an expected call of pendingPaymentsForBlockHash
func (mr *MockDatabaseMockRecorder) pendingPaymentsForBlockHash(blockHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "pendingPaymentsForBlockHash", reflect.TypeOf((*MockDatabase)(nil).pendingPaymentsForBlockHash), blockHash)
}

// archivedPayments mocks base method
func (m *MockDatabase) archivedPayments() ([]*Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "archivedPayments")
	ret0, _ := ret[0].([]*Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// archivedPayments indicates an expected call of archivedPayments
func (mr *MockDatabaseMockRecorder) archivedPayments() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "archivedPayments", reflect.TypeOf((*MockDatabase)(nil).archivedPayments))
}

// maturePendingPayments mocks base method
func (m *MockDatabase) maturePendingPayments(height uint32) (map[string][]*Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "maturePendingPayments", height)
	ret0, _ := ret[0].(map[string][]*Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// maturePendingPayments indicates an expected call of maturePendingPayments
func (mr *MockDatabaseMockRecorder) maturePendingPayments(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "maturePendingPayments", reflect.TypeOf((*MockDatabase)(nil).maturePendingPayments), height)
}

// PersistShare mocks base method
func (m *MockDatabase) PersistShare(share *Share) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersistShare", share)
	ret0, _ := ret[0].(error)
	return ret0
}

// PersistShare indicates an expected call of PersistShare
func (mr *MockDatabaseMockRecorder) PersistShare(share interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersistShare", reflect.TypeOf((*MockDatabase)(nil).PersistShare), share)
}

// fetchShare mocks base method
func (m *MockDatabase) fetchShare(id string) (*Share, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "fetchShare", id)
	ret0, _ := ret[0].(*Share)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// fetchShare indicates an expected call of fetchShare
func (mr *MockDatabaseMockRecorder) fetchShare(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "fetchShare", reflect.TypeOf((*MockDatabase)(nil).fetchShare), id)
}

// ppsEligibleShares mocks base method
func (m *MockDatabase) ppsEligibleShares(max int64) ([]*Share, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ppsEligibleShares", max)
	ret0, _ := ret[0].([]*Share)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ppsEligibleShares indicates an expected call of ppsEligibleShares
func (mr *MockDatabaseMockRecorder) ppsEligibleShares(max interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ppsEligibleShares", reflect.TypeOf((*MockDatabase)(nil).ppsEligibleShares), max)
}

// pplnsEligibleShares mocks base method
func (m *MockDatabase) pplnsEligibleShares(min int64) ([]*Share, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "pplnsEligibleShares", min)
	ret0, _ := ret[0].([]*Share)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// pplnsEligibleShares indicates an expected call of pplnsEligibleShares
func (mr *MockDatabaseMockRecorder) pplnsEligibleShares(min interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "pplnsEligibleShares", reflect.TypeOf((*MockDatabase)(nil).pplnsEligibleShares), min)
}

// pruneShares mocks base method
func (m *MockDatabase) pruneShares(minNano int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "pruneShares", minNano)
	ret0, _ := ret[0].(error)
	return ret0
}

// pruneShares indicates an expected call of pruneShares
func (mr *MockDatabaseMockRecorder) pruneShares(minNano interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "pruneShares", reflect.TypeOf((*MockDatabase)(nil).pruneShares), minNano)
}

// fetchAcceptedWork mocks base method
func (m *MockDatabase) fetchAcceptedWork(id string) (*AcceptedWork, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "fetchAcceptedWork", id)
	ret0, _ := ret[0].(*AcceptedWork)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// fetchAcceptedWork indicates an expected call of fetchAcceptedWork
func (mr *MockDatabaseMockRecorder) fetchAcceptedWork(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "fetchAcceptedWork", reflect.TypeOf((*MockDatabase)(nil).fetchAcceptedWork), id)
}

// persistAcceptedWork mocks base method
func (m *MockDatabase) persistAcceptedWork(work *AcceptedWork) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "persistAcceptedWork", work)
	ret0, _ := ret[0].(error)
	return ret0
}

// persistAcceptedWork indicates an expected call of persistAcceptedWork
func (mr *MockDatabaseMockRecorder) persistAcceptedWork(work interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "persistAcceptedWork", reflect.TypeOf((*MockDatabase)(nil).persistAcceptedWork), work)
}

// updateAcceptedWork mocks base method
func (m *MockDatabase) updateAcceptedWork(work *AcceptedWork) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "updateAcceptedWork", work)
	ret0, _ := ret[0].(error)
	return ret0
}

// updateAcceptedWork indicates an expected call of updateAcceptedWork
func (mr *MockDatabaseMockRecorder) updateAcceptedWork(work interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "updateAcceptedWork", reflect.TypeOf((*MockDatabase)(nil).updateAcceptedWork), work)
}

// deleteAcceptedWork mocks base method
func (m *MockDatabase) deleteAcceptedWork(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "deleteAcceptedWork", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// deleteAcceptedWork indicates an expected call of deleteAcceptedWork
func (mr *MockDatabaseMockRecorder) deleteAcceptedWork(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "deleteAcceptedWork", reflect.TypeOf((*MockDatabase)(nil).deleteAcceptedWork), id)
}

// listMinedWork mocks base method
func (m *MockDatabase) listMinedWork() ([]*AcceptedWork, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "listMinedWork")
	ret0, _ := ret[0].([]*AcceptedWork)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// listMinedWork indicates an expected call of listMinedWork
func (mr *MockDatabaseMockRecorder) listMinedWork() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "listMinedWork", reflect.TypeOf((*MockDatabase)(nil).listMinedWork))
}

// fetchUnconfirmedWork mocks base method
func (m *MockDatabase) fetchUnconfirmedWork(height uint32) ([]*AcceptedWork, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "fetchUnconfirmedWork", height)
	ret0, _ := ret[0].([]*AcceptedWork)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// fetchUnconfirmedWork indicates an expected call of fetchUnconfirmedWork
func (mr *MockDatabaseMockRecorder) fetchUnconfirmedWork(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "fetchUnconfirmedWork", reflect.TypeOf((*MockDatabase)(nil).fetchUnconfirmedWork), height)
}

// fetchJob mocks base method
func (m *MockDatabase) fetchJob(id string) (*Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "fetchJob", id)
	ret0, _ := ret[0].(*Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// fetchJob indicates an expected call of fetchJob
func (mr *MockDatabaseMockRecorder) fetchJob(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "fetchJob", reflect.TypeOf((*MockDatabase)(nil).fetchJob), id)
}

// persistJob mocks base method
func (m *MockDatabase) persistJob(job *Job) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "persistJob", job)
	ret0, _ := ret[0].(error)
	return ret0
}

// persistJob indicates an expected call of persistJob
func (mr *MockDatabaseMockRecorder) persistJob(job interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "persistJob", reflect.TypeOf((*MockDatabase)(nil).persistJob), job)
}

// deleteJob mocks base method
func (m *MockDatabase) deleteJob(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "deleteJob", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// deleteJob indicates an expected call of deleteJob
func (mr *MockDatabaseMockRecorder) deleteJob(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "deleteJob", reflect.TypeOf((*MockDatabase)(nil).deleteJob), id)
}

// deleteJobsBeforeHeight mocks base method
func (m *MockDatabase) deleteJobsBeforeHeight(height uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "deleteJobsBeforeHeight", height)
	ret0, _ := ret[0].(error)
	return ret0
}

// deleteJobsBeforeHeight indicates an expected call of deleteJobsBeforeHeight
func (mr *MockDatabaseMockRecorder) deleteJobsBeforeHeight(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "deleteJobsBeforeHeight", reflect.TypeOf((*MockDatabase)(nil).deleteJobsBeforeHeight), height)
}
